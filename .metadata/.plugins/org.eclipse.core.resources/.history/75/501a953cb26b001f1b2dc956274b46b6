/*
 * Copyright (c) 2023, Kenneth Lindsay
 * All rights reserved.
 * Author: Kenneth Lindsay
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *      following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *      following disclaimer in the documentation and/or other materials provided with the distribution.
 *   3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
 *      products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/****************************************************************************************************
 * This app uses GPIO0_bit75 on P8_14 as output
 *
 * Tested with kernel version 5.10.168-ti-r61,a and SD image bbai64-debian-11.7-xfce-arm64-2023-05-03.img.xz
 *
*/

/*
This source code requires that the permissions on the Beaglebone-AI64 /lib/firmware be changed to
group write privileges.  In addition the ownership of the library /lib/firmware changed from
root:root to root:userxx.  This is done so that the pru code can be loaded into the firmware
library.  Else copying to firmware will need sudo privileges.
 *
$ sudo chown root:userxx /lib/firmware
$ sudo chmod g+w /lib/firmware

 Note: The following instructions are based on uploading from your PC/Workstation CCS Project
 Debug Binaries folder "*.out" filefolder to BBAI-64. In my case I drag and drop using the
 RemoteSystems Sftp Files/MyHome on the BBAI-64 using a SSH connection.

The pru code needs to be copied into the firmware library using the shell commands on the BBAI-64.
In this case I assumed that the "chown" and "chmod" from above were not used.

IF --   /properties/Build/Basic Options/Specify output file name = j7-pru1_0-fw.out
    $ sudo cp ~/SquareWave1.out /lib/firmware/j7-pru1_0-fw
    $ echo start > /dev/remoteproc/j7-pru1_0/state
    $ echo stop > /dev/remoteproc/j7-pru1_0/state
ELSE IF -- /properties/Build/Basic Options/Specify output file name = square-wave.out
    $ cp SquareWave1.out /lib/firmware/SquareWave1
    $ echo SquareWave0 > /dev/remoteproc/j7-pru1_0/firmware
    $ echo start > /dev/remoteproc/j7-pru1_0/state
    $ echo stop > /dev/remoteproc/j7-pru1_0/state
ENDIF

Enable PRU pins thru Overlay Example "SquareWave.dts" as follows:
$ cd /opt/source/dtb-5.10-ti
$ sudo cp ~/SquareWave.dts src/arm64/overlays
$ make all_arm64
$ make install_arm64
$ cd /boot/firmware/extlinux
Add SquareWave.dtbo to extlinux.conf
$ sudo nano extlinux.conf
label Linux microSD
    kernel /Image
    append root=/dev/mmcblk1p2 ro rootfstype=ext4 rootwait net.iframes=0 quiet
    fdtdir /
    fdtoverlays /overlays/SquareWave.dtbo
    initrd /initrd.img

$ sudo reboot

*/

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <pru_intc.h>
#include <rsc_types.h>

//#define RPMSG_CONTROL
#ifdef RPMSG_CONTROL
    #include <pru_rpmsg.h>
    #include <pru_virtqueue.h>
#endif
#include <pru_gpio.h>
#include "resource_table.h"
#include "intc_map_1.h"

volatile register uint32_t __R30;
volatile register uint32_t __R31;

#define CLK_FREQ_MHZ       250
#define PULSE_WIDTH_US     500
#define PW_CLK_CYCLES      (CLK_FREQ_MHZ - 11) // Clock cycles adjusted for for loop
/*
 * | b19 b18 b17 b16 | b15 b14 b13 b12 | b11 b10  b9  b8 |  b7  b6  b5  b4 |  b3  b2  b1  b0 |
 * -------------------------------------------------------------------------------------------
 * |  1   1   0   1  |  0   0   0   0  |  0   0   0   0  |  0   0   0   0  |  0   0   0   0  |
 *          d                 0                 0                 0                 0        |
 *  0x000d1000 for b19, b18, b16
 */
/* The following sections of code was cut and pasted from the PRU_RPMsg_Echo_Interrupt 0 example
 * from the ~/ti/pru-software-support-package/examples/j721e */
#ifdef RPMSG_CONTROL
    /* Host-0 Interrupt sets bit 30 in register R31 */
    #define HOST_INT            ((uint32_t) 1 << 30)
    /* The PRU-ICSS system events used for RPMsg are defined in the Linux device tree
     * PRU0 uses system event 16 (To ARM) and 17 (From ARM)
     * PRU1 uses system event 18 (To ARM) and 19 (From ARM) */
    #define TO_ARM_HOST         18
    #define FROM_ARM_HOST       19
    /* Using the name 'rpmsg-pru' will probe the rpmsg_pru driver found
     * at linux-x.y.z/drivers/rpmsg/rpmsg_pru.c */
    #define CHAN_NAME           "rpmsg-pru"
    #define CHAN_PORT           31
    #define XSTR(x)             #x
    #define CHAN_DESC(x)        "Channel "XSTR(x)
    /* Used to make sure the Linux drivers are ready for RPMsg communication
     * Found at linux-x.y.z/include/uapi/linux/virtio_config.h */
    #define VIRTIO_CONFIG_S_DRIVER_OK   4
#endif
void main(void)
{
    uint32_t period = 1000; // Period in US

#ifdef RPMSG_CONTROL
    volatile uint8_t *status;
    struct pru_rpmsg_transport transport;
    uint16_t src, dst, len;
//  char payload[] = "500";
    /* Clear the status of the PRU-ICSS system event that the ARM will use to 'kick' us */
    CT_INTC.STATUS_CLR_INDEX_REG_bit.STATUS_CLR_INDEX = FROM_ARM_HOST;
    /* Make sure the Linux drivers are ready for RPMsg communication */
    status = &resourceTable.rpmsg_vdev.status;
    while (!(*status & VIRTIO_CONFIG_S_DRIVER_OK));
    /* Initialize the RPMsg transport structure */
    pru_rpmsg_init(&transport, &resourceTable.rpmsg_vring0, &resourceTable.rpmsg_vring1, TO_ARM_HOST, FROM_ARM_HOST);
    /* Create the RPMsg channel between the PRU and ARM user space using the transport structure. */
    while(pru_rpmsg_channel(RPMSG_NS_CREATE, &transport, CHAN_NAME, CHAN_PORT) != PRU_RPMSG_SUCCESS);
#endif
    initializeGpio1();
    while(1)
    {
    #ifdef RPMSG_CONTROL
        if (__R31 & HOST_INT)
        {
            /* Clear the event status */
            CT_INTC.STATUS_CLR_INDEX_REG_bit.STATUS_CLR_INDEX = FROM_ARM_HOST;
            /* Receive all available messages, multiple messages can be sent per kick */
            while(pru_rpmsg_receive(&transport, &src, &dst, &period, &len) == PRU_RPMSG_SUCCESS)
            {
                /* Echo the message back to the same address from which we just received */
                 pru_rpmsg_send(&transport, dst, src, &period, sizeof(period));
            }
        }
    #endif
        scopeDebug1(period);
    }
}

